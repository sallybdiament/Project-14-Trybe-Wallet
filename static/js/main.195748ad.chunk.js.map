{"version":3,"sources":["redux/actions/index.js","redux/reducers/user.js","redux/reducers/wallet.js","redux/reducers/index.js","redux/store.js","pages/Login.js","components/Header.js","components/Table.js","components/WalletForm.js","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["ADD_USER","GET_CURRENCY","ADD_EXPENSE","DELETE_CUSTOMER","ACTIVATE_EDIT","EDIT_EXPENSE","getArrayOfCurrrencies","fetch","response","json","data","arrayCurr","Object","keys","currSemUSDT","filter","currencie","INITIAL_STATE","email","user","state","action","type","initialState","currencies","expenses","editor","idToEdit","wallet","payload","exp","Number","id","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","Login","isEntryButtonDisabled","password","inputEmail","redirect","validateEmail","test","validate","length","setState","onInputChange","event","target","name","value","handleClick","addDispatch","props","this","className","htmlFor","onChange","disabled","onClick","from","to","React","Component","connect","dispatch","Header","reduce","accExp","exchangeRates","currency","ask","toFixed","Table","deleteCustomerDispatch","handleEditClick","activateEditDispatch","map","key","description","tag","method","e","alimentacao","WalletForm","valorDespesa","descrDespesa","currencyInput","metodoInput","categoriaInput","handleChange","handleSubmit","addExpenseDispatch","handleEditSubmit","editExpenseDispatch","editedExpense","allExpenses","concat","sort","a","b","addCurrenciesDispatch","curr","Wallet","App","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6QAAaA,EAAW,WACXC,EAAe,eACfC,EAAc,cACdC,EAAkB,kBAClBC,EAAgB,gBAChBC,EAAe,eAmBtBC,EAAqB,iDAAG,oHACLC,MAAM,+CADD,cACtBC,EADsB,gBAETA,EAASC,OAFA,cAEtBC,EAFsB,OAGtBC,EAAYC,OAAOC,KAAKH,GACxBI,EAAcH,EAAUI,QAAO,SAACC,GAAD,MAA6B,SAAdA,CAAf,IAJT,kBAKrBF,GALqB,2CAAH,qDCtBrBG,EAAgB,CACpBC,MAAO,IAYMC,MATf,WAA8C,IAAhCC,EAA+B,uDAAvBH,EAAeI,EAAQ,uCAC3C,OAAQA,EAAOC,OACVtB,EACI,2BAAKoB,GAAZ,IAAmBF,MAAOG,EAAOH,QAE1BE,CAEV,E,QCVKG,EAAe,CACnBC,WAAY,GACZC,SAAU,GACVC,QAAQ,EACRC,SAAU,GAuBGC,MApBf,WAA+C,IAA/BR,EAA8B,uDAAtBG,EAAcF,EAAQ,uCAC5C,OAAQA,EAAOC,MACf,KAAKrB,EACH,OAAO,2BAAKmB,GAAZ,IAAmBI,WAAYH,EAAOQ,UACxC,KAAK3B,EACH,OAAO,2BAAKkB,GAAZ,IAAmBK,SAAS,GAAD,mBAAML,EAAMK,UAAZ,CAAsBJ,EAAOQ,YAC1D,KAAK1B,EACH,OAAO,2BACFiB,GADL,IAEEK,SAAUL,EAAMK,SACbV,QAAO,SAACe,GAAD,OAASC,OAAOD,EAAIE,MAAQD,OAAOV,EAAOQ,QAA1C,MACd,KAAKzB,EACH,OAAO,2BAAKgB,GAAZ,IAAmBM,QAAQ,EAAMC,SAAUN,EAAOQ,UACpD,KAAKxB,EACH,OAAO,2BAAKe,GAAZ,IAAmBK,SAAUJ,EAAOQ,UACtC,QACE,OAAOT,EAEV,ECtBca,EAFKC,0BAAgB,CAAEf,OAAMS,WCCtCO,EAAQC,sBACZH,EACAI,8BACEC,0BAAgBC,OAIhBC,OAAOC,UACTD,OAAOL,MAAQA,GAGFA,Q,4CCTTO,E,4MACJtB,MAAO,CACLuB,uBAAuB,EACvBC,SAAU,GACVC,WAAY,GACZC,UAAU,G,EAGZC,cAAgB,SAAC7B,GAEf,MADW,eACD8B,KAAK9B,EAChB,E,EAED+B,SAAW,WACT,IACA,EAAiC,EAAK7B,MAA9BwB,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,WACdD,EAASM,OAFA,GAEiB,EAAKH,cAAcF,GAC/C,EAAKM,SAAS,CAAER,uBAAuB,IAEvC,EAAKQ,SAAS,CAAER,uBAAuB,GAE1C,E,EAEDS,cAAgB,SAACC,GACf,IAAQC,EAAWD,EAAXC,OACR,EAAKH,SAAL,eAAiBG,EAAOC,KAAOD,EAAOE,QACnC,kBAAM,EAAKP,UAAX,GACJ,E,EAEDQ,YAAc,YAIZC,EAHwB,EAAKC,MAArBD,aACe,EAAKtC,MAApByB,YAGR,EAAKM,SAAS,CAAEL,UAAU,GAC3B,E,4CAED,WACE,MAAkEc,KAAKxC,MAA/DuB,EAAR,EAAQA,sBAAuBE,EAA/B,EAA+BA,WAAYD,EAA3C,EAA2CA,SAAUE,EAArD,EAAqDA,SACrD,OACE,yBAAKe,UAAU,SACb,2BAAOC,QAAQ,cAAf,qBAEE,2BACExC,KAAK,QACL,cAAY,cACZiC,KAAK,aACLvB,GAAG,aACHwB,MAAQX,EACRkB,SAAWH,KAAKR,iBAGpB,2BAAOU,QAAQ,YAAf,SAEE,2BACExC,KAAK,WACL,cAAY,iBACZiC,KAAK,WACLvB,GAAG,WACHwB,MAAQZ,EACRmB,SAAWH,KAAKR,iBAGpB,4BACE9B,KAAK,SACL,cAAY,sBACZ0C,SAAWrB,EACXsB,QAAUL,KAAKH,aAJjB,UAQEX,GAAY,kBAAC,IAAD,CAAUoB,KAAK,IAAIC,GAAG,cAEzC,K,GAzEiBC,IAAMC,WAoFXC,cAAQ,MARI,SAACC,GAAD,MAAe,CACxCb,YAAa,SAACF,GAAD,OAAWe,EL7ES,CAAEjD,KAAMtB,EAAUkB,MK6EVsC,GAA5B,EADY,GAQZc,CAAkC5B,GCvF3C8B,E,4JACJ,WACE,MAA4BZ,KAAKD,MAAzBzC,EAAR,EAAQA,MAAOO,EAAf,EAAeA,SACf,OACE,6BACE,uBAAG,cAAY,eAAf,gBAEIP,GAEJ,uBAAG,cAAY,eAEXO,EAASgD,QAAO,SAACC,EAAQ5C,GAAT,OACb4C,EAAU3C,OAAOD,EAAI0B,OAASzB,OAAOD,EAAI6C,cAAc7C,EAAI8C,UAAUC,IADxD,GAEb,GAAGC,QAAQ,IAGlB,uBAAG,cAAY,yBAAf,kBAGL,K,GAnBkBV,IAAMC,WAgCZC,eAVS,SAAClD,GAAD,MAAY,CAClCF,MAAOE,EAAMD,KAAKD,MAClBO,SAAUL,EAAMQ,OAAOH,SAFD,GAUT6C,CAAyBE,GC/BlCO,E,4MACNtB,YAAc,SAACJ,GACb,IAAQrB,EAAOqB,EAAMC,OAAbtB,IAERgD,EADmC,EAAKrB,MAAhCqB,wBACehD,EACxB,E,EAEDiD,gBAAkB,SAAC5B,GACjB,IAAQrB,EAAOqB,EAAMC,OAAbtB,IAERkD,EADiC,EAAKvB,MAA9BuB,sBACalD,EACtB,E,4CAED,WAAU,IAAD,OACCP,EAAamC,KAAKD,MAAlBlC,SACR,OACE,6BACE,+BACE,4BACE,+CAGA,mCAGA,sDAGA,qCAGA,qCAGA,mDAGA,gDAGA,qDAGA,+CAIF,+BACIA,EAAS0D,KAAI,SAACrD,GAAD,OACb,wBAAIsD,IAAMtD,EAAIuD,aACZ,4BAAMvD,EAAIuD,aACV,4BAAMvD,EAAIwD,KACV,4BAAMxD,EAAIyD,QACV,4BAAOxD,OAAOD,EAAI0B,OAAQsB,QAAQ,IAClC,4BAAMhD,EAAI6C,cAAc7C,EAAI8C,UAAUrB,MACtC,4BAAOxB,OAAOD,EAAI6C,cAAc7C,EAAI8C,UAAUC,KAAMC,QAAQ,IAC5D,6BAEK/C,OAAOD,EAAI6C,cAAc7C,EAAI8C,UAAUC,KACtC9C,OAAOD,EAAI0B,QAAQsB,QAAQ,IAGjC,oCACA,4BACE,4BACEM,IAAMtD,EAAIE,GACVA,GAAKF,EAAIE,GACT,cAAY,WACZV,KAAK,SACL2C,QAAU,EAAKgB,iBALjB,kBASA,4BACE,cAAY,aACZG,IAAMtD,EAAIE,GACVV,KAAK,SACL2C,QAAU,EAAKR,YACfzB,GAAKF,EAAIE,IALX,YAzBS,MAwCxB,K,GAxFmBqC,aA0GLC,eAfS,SAAClD,GAAD,MAAY,CAClCK,SAAUL,EAAMQ,OAAOH,SADD,IAIG,SAAC8C,GAAD,MAAe,CACxCS,uBAAwB,SAACQ,GAAD,OAAOjB,EP5FW,CAAEjD,KAAMnB,EAAiB0B,QO4FZ2D,GAA/B,EACxBN,qBAAsB,SAACM,GAAD,OAAOjB,EP5FW,CAAEjD,KAAMlB,EAAeyB,QO4FZ2D,GAA7B,EAFG,GAWZlB,CAA6CS,GCzGtDU,EAAc,oBACdC,E,4MACJtE,MAAO,CACLY,IAAK,EACL2D,aAAc,GACdC,aAAc,GACdC,cAAe,MACfC,YAAa,WACbC,eAAgBN,G,EAiBlBO,aAAe,SAAC3C,GACd,IAAQC,EAAWD,EAAXC,OACR,EAAKH,SAAL,eAAiBG,EAAOC,KAAOD,EAAOE,OAEvC,E,EAEDyC,a,gCAAe,uHACLC,EAAuB,EAAKvC,MAA5BuC,mBADK,EAIT,EAAK9E,MADPuE,EAHW,EAGXA,aAAcC,EAHH,EAGGA,aAAcC,EAHjB,EAGiBA,cAAeC,EAHhC,EAGgCA,YAAaC,EAH7C,EAG6CA,eAAgB/D,EAH7D,EAG6DA,GAH7D,SAKUzB,MAAM,+CALhB,cAKPC,EALO,gBAMMA,EAASC,OANf,OAMPC,EANO,OAgBbwF,EATiB,CACflE,GAAIA,EAAK,EACTwB,MAAOmC,EACPN,YAAaO,EACbhB,SAAUiB,EACVN,OAAQO,EACRR,IAAKS,EACLpB,cAAejE,IAGjB,EAAKyC,SAAS,CACZnB,GAAIA,EAAK,EACT2D,aAAc,GACdC,aAAc,GACdC,cAAe,MACfC,YAAa,WACbC,eAAgBN,IAvBL,4C,EA2BfU,iBAAmB,WACjB,MAAoD,EAAKxC,MAAjDyC,EAAR,EAAQA,oBAAqBzE,EAA7B,EAA6BA,SAAUF,EAAvC,EAAuCA,SACvC,EAEI,EAAKL,MADPuE,EADF,EACEA,aAAcC,EADhB,EACgBA,aAAcC,EAD9B,EAC8BA,cAAeC,EAD7C,EAC6CA,YAAaC,EAD1D,EAC0DA,eAAgB/D,EAD1E,EAC0EA,GAEpEqE,EAAgB,CACpBrE,GAAID,OAAOJ,GACX6B,MAAOmC,EACPN,YAAaO,EACbhB,SAAUiB,EACVN,OAAQO,EACRR,IAAKS,EACLpB,cAAelD,EAASE,GAAUgD,eAG9B2B,EADgB7E,EAASV,QAAO,SAACe,GAAD,OAASA,EAAIE,KAAOD,OAAOJ,EAA3B,IACJ4E,OAAOF,GAQzCD,EALqBE,EAAYE,MAAK,SAACC,EAAGC,GACxC,OAAID,EAAEzE,GAAK0E,EAAE1E,IAFH,EAGNyE,EAAEzE,GAAK0E,EAAE1E,GAAW,EACjB,CACR,KAED,EAAKmB,SAAS,CACZnB,GAAIA,EAAK,EACT2D,aAAc,GACdC,aAAc,GACdC,cAAe,MACfC,YAAa,WACbC,eAAgBN,GAEnB,E,uDA/ED,YAEEkB,EADkC/C,KAAKD,MAA/BgD,wBAWT,G,oBAqED,WACE,MAA+B/C,KAAKD,MAA5BnC,EAAR,EAAQA,WAAYE,EAApB,EAAoBA,OACpB,EAGIkC,KAAKxC,MAFPuE,EADF,EACEA,aACAC,EAFF,EAEEA,aAAcC,EAFhB,EAEgBA,cAAeC,EAF/B,EAE+BA,YAAaC,EAF5C,EAE4CA,eAE5C,OACE,6BACE,2BAAOjC,QAAQ,gBAAf,SAEE,2BACExC,KAAK,OACL,cAAY,cACZiC,KAAK,eACLvB,GAAG,eACHwB,MAAQmC,EACR5B,SAAWH,KAAKoC,gBAGpB,2BAAOlC,QAAQ,gBAAf,mBAEE,2BACExC,KAAK,OACL,cAAY,oBACZiC,KAAK,eACLvB,GAAG,eACHwB,MAAQoC,EACR7B,SAAWH,KAAKoC,gBAGpB,2BAAOlC,QAAQ,iBAAf,SAEE,4BACE,cAAY,iBACZP,KAAK,gBACLvB,GAAG,gBACHwB,MAAQqC,EACR9B,SAAWH,KAAKoC,cAEdxE,EAAW2D,KAAI,SAACyB,GAAD,OAAU,4BAAQxB,IAAMwB,GAAQA,EAAhC,MAGrB,2BAAO9C,QAAQ,eAAf,0BAEE,4BACE,cAAY,eACZP,KAAK,cACLvB,GAAG,cACHwB,MAAQsC,EACR/B,SAAWH,KAAKoC,cAEhB,4CACA,2DACA,4DAGJ,2BAAOlC,QAAQ,kBAAf,wBAEE,4BACE,cAAY,YACZP,KAAK,iBACLvB,GAAG,iBACHwB,MAAQuC,EACRhC,SAAWH,KAAKoC,cAEhB,gCAASP,GACT,yCACA,4CACA,8CACA,8CAGF/D,EAEE,4BAAQJ,KAAK,SAAS2C,QAAUL,KAAKuC,kBAArC,kBAIA,4BAAQ7E,KAAK,SAAS2C,QAAUL,KAAKqC,cAArC,qBAGJ,kBAAC,EAAD,MAGL,K,GA/KsB5B,aAyMVC,eAjBS,SAAClD,GAAD,MAAY,CAClCI,WAAYJ,EAAMQ,OAAOJ,WACzBE,OAAQN,EAAMQ,OAAOF,OACrBC,SAAUP,EAAMQ,OAAOD,SACvBF,SAAUL,EAAMQ,OAAOH,SAJD,IANG,SAAC8C,GAAD,MAAe,CACxCoC,sBAAuB,kBAAMpC,ER1JA,iDAAM,WAAOA,GAAP,iGACZjE,IADY,OAC7BE,EAD6B,OAEnC+D,EArBgC,CAChCjD,KAAMrB,EACN4B,QAmBqBrB,IAFc,2CAAN,sDQ0JN,EACvB0F,mBAAoB,SAAC1C,GAAD,OAAWe,ERnLO,CAAEjD,KAAMpB,EAAa2B,QQmLR2B,GAA/B,EACpB4C,oBAAqB,SAAC5C,GAAD,OAAWe,ERjLO,CAAEjD,KAAMjB,EAAcwB,QQiLR2B,GAAhC,EAHI,GAuBZc,CAA6CoB,GC3MtDmB,E,4JACJ,WACE,OACE,6BACE,yBAAKhD,UAAU,UACb,kBAAC,EAAD,OAEF,kBAAC,EAAD,MAGL,K,GAVkBO,IAAMC,WAaZwC,ICbTC,E,4JACJ,WACE,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYvE,IAClC,kBAAC,IAAD,CAAOqE,OAAK,EAACC,KAAK,YAAYC,UAAYJ,KAIjD,K,GAVezC,IAAMC,WAaTyC,ICNKI,QACW,cAA7B1E,OAAO2E,SAASC,UAEe,UAA7B5E,OAAO2E,SAASC,UAEhB5E,OAAO2E,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUpF,MAAQA,GAChB,kBAAC,EAAD,QAGJqF,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,YACd,IACAC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,QACrB,G","file":"static/js/main.195748ad.chunk.js","sourcesContent":["export const ADD_USER = 'ADD_USER';\nexport const GET_CURRENCY = 'GET_CURRENCY';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\nexport const DELETE_CUSTOMER = 'DELETE_CUSTOMER';\nexport const ACTIVATE_EDIT = 'ACTIVATE_EDIT';\nexport const EDIT_EXPENSE = 'EDIT_EXPENSE';\n\nexport const addUser = (email) => ({ type: ADD_USER, email });\nexport const addExpense = (payload) => ({ type: ADD_EXPENSE, payload });\nexport const deleteCustomer = (payload) => ({ type: DELETE_CUSTOMER, payload });\nexport const activateEdit = (payload) => ({ type: ACTIVATE_EDIT, payload });\nexport const editExpense = (payload) => ({ type: EDIT_EXPENSE, payload });\n\nconst getCurrency = (payload) => ({\n  type: GET_CURRENCY,\n  payload,\n});\n\n// const serviceFetch = async () => {\n//   const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n//   const data = await response.json();\n//   return data;\n// };\n\nconst getArrayOfCurrrencies = async () => {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const data = await response.json();\n  const arrayCurr = Object.keys(data);\n  const currSemUSDT = arrayCurr.filter((currencie) => currencie !== 'USDT');\n  return currSemUSDT;\n};\n\nexport const fetchCurrencies = () => async (dispatch) => {\n  const response = await getArrayOfCurrrencies();\n  dispatch(getCurrency(response));\n};\n\n// export const getAPI = () => async (dispatch) => {\n//   const response = await serviceFetch();\n//   dispatch(addExpense(response));\n// };\n","import { ADD_USER } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nfunction user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case ADD_USER:\n    return { ...state, email: action.email };\n  default:\n    return state;\n  }\n}\n\nexport default user;\n","import { GET_CURRENCY,\n  ADD_EXPENSE, DELETE_CUSTOMER, ACTIVATE_EDIT, EDIT_EXPENSE } from '../actions';\n\nconst initialState = {\n  currencies: [],\n  expenses: [],\n  editor: false,\n  idToEdit: 0,\n};\n\nfunction wallet(state = initialState, action) {\n  switch (action.type) {\n  case GET_CURRENCY:\n    return { ...state, currencies: action.payload };\n  case ADD_EXPENSE:\n    return { ...state, expenses: [...state.expenses, action.payload] };\n  case DELETE_CUSTOMER:\n    return {\n      ...state,\n      expenses: state.expenses\n        .filter((exp) => Number(exp.id) !== Number(action.payload)) };\n  case ACTIVATE_EDIT:\n    return { ...state, editor: true, idToEdit: action.payload };\n  case EDIT_EXPENSE:\n    return { ...state, expenses: action.payload };\n  default:\n    return state;\n  }\n}\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { addUser } from '../redux/actions';\n// import '../css/login.css';\n\nclass Login extends React.Component {\n  state ={\n    isEntryButtonDisabled: true,\n    password: '',\n    inputEmail: '',\n    redirect: false,\n  }\n\n  validateEmail = (email) => {\n    const re = /\\S+@\\S+\\.\\S+/;\n    return re.test(email);\n  };\n\n  validate = () => {\n    const five = 5;\n    const { password, inputEmail } = this.state;\n    if (password.length > five && this.validateEmail(inputEmail)) {\n      this.setState({ isEntryButtonDisabled: false });\n    } else {\n      this.setState({ isEntryButtonDisabled: true });\n    }\n  }\n\n  onInputChange = (event) => {\n    const { target } = event;\n    this.setState({ [target.name]: target.value,\n    }, () => this.validate());\n  }\n\n  handleClick = () => {\n    const { addDispatch } = this.props;\n    const { inputEmail } = this.state;\n    // console.log(inputEmail);\n    addDispatch(inputEmail);\n    this.setState({ redirect: true });\n  }\n\n  render() {\n    const { isEntryButtonDisabled, inputEmail, password, redirect } = this.state;\n    return (\n      <div className=\"login\">\n        <label htmlFor=\"inputEmail\">\n          Insira seu e-mail:\n          <input\n            type=\"email\"\n            data-testid=\"email-input\"\n            name=\"inputEmail\"\n            id=\"inputEmail\"\n            value={ inputEmail }\n            onChange={ this.onInputChange }\n          />\n        </label>\n        <label htmlFor=\"password\">\n          Senha:\n          <input\n            type=\"password\"\n            data-testid=\"password-input\"\n            name=\"password\"\n            id=\"password\"\n            value={ password }\n            onChange={ this.onInputChange }\n          />\n        </label>\n        <button\n          type=\"submit\"\n          data-testid=\"login-submit-button\"\n          disabled={ isEntryButtonDisabled }\n          onClick={ this.handleClick }\n        >\n          Entrar\n        </button>\n        { redirect && <Redirect from=\"/\" to=\"/carteira\" />}\n      </div>);\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  addDispatch: (value) => dispatch(addUser(value)),\n});\n\nLogin.propTypes = {\n  addDispatch: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Header extends React.Component {\n  render() {\n    const { email, expenses } = this.props;\n    return (\n      <div>\n        <p data-testid=\"email-field\">\n          Email logado:\n          { email }\n        </p>\n        <p data-testid=\"total-field\">\n          {\n            expenses.reduce((accExp, exp) => (\n              (accExp + (Number(exp.value) * Number(exp.exchangeRates[exp.currency].ask)))\n            ), 0).toFixed(2)\n          }\n        </p>\n        <p data-testid=\"header-currency-field\">Câmbio: BRL</p>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { deleteCustomer, activateEdit } from '../redux/actions';\n\nclass Table extends Component {\nhandleClick = (event) => {\n  const { id } = event.target;\n  const { deleteCustomerDispatch } = this.props;\n  deleteCustomerDispatch(id);\n}\n\nhandleEditClick = (event) => {\n  const { id } = event.target;\n  const { activateEditDispatch } = this.props;\n  activateEditDispatch(id);\n}\n\nrender() {\n  const { expenses } = this.props;\n  return (\n    <div>\n      <table>\n        <tr>\n          <th>\n            Descrição\n          </th>\n          <th>\n            Tag\n          </th>\n          <th>\n            Método de pagamento\n          </th>\n          <th>\n            Valor\n          </th>\n          <th>\n            Moeda\n          </th>\n          <th>\n            Câmbio utilizado\n          </th>\n          <th>\n            Valor convertido\n          </th>\n          <th>\n            Moeda de conversão\n          </th>\n          <th>\n            Editar/Excluir\n          </th>\n        </tr>\n        <tbody>\n          { expenses.map((exp) => (\n            <tr key={ exp.description }>\n              <td>{ exp.description}</td>\n              <td>{ exp.tag}</td>\n              <td>{ exp.method}</td>\n              <td>{ (Number(exp.value)).toFixed(2) }</td>\n              <td>{ exp.exchangeRates[exp.currency].name}</td>\n              <td>{ (Number(exp.exchangeRates[exp.currency].ask)).toFixed(2) }</td>\n              <td>\n                {\n                  (Number(exp.exchangeRates[exp.currency].ask)\n                  * Number(exp.value)).toFixed(2)\n                }\n              </td>\n              <td>Real</td>\n              <td>\n                <button\n                  key={ exp.id }\n                  id={ exp.id }\n                  data-testid=\"edit-btn\"\n                  type=\"submit\"\n                  onClick={ this.handleEditClick }\n                >\n                  Editar despesa\n                </button>\n                <button\n                  data-testid=\"delete-btn\"\n                  key={ exp.id }\n                  type=\"submit\"\n                  onClick={ this.handleClick }\n                  id={ exp.id }\n                >\n                  Excluir\n                </button>\n              </td>\n            </tr>))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteCustomerDispatch: (e) => dispatch(deleteCustomer(e)),\n  activateEditDispatch: (e) => dispatch(activateEdit(e)),\n});\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.string).isRequired,\n  deleteCustomerDispatch: PropTypes.func.isRequired,\n  activateEditDispatch: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchCurrencies, addExpense, editExpense } from '../redux/actions';\nimport Table from './Table';\n\nconst alimentacao = 'Alimentação';\nclass WalletForm extends Component {\n  state ={\n    id: -1,\n    valorDespesa: '',\n    descrDespesa: '',\n    currencyInput: 'USD',\n    metodoInput: 'Dinheiro',\n    categoriaInput: alimentacao,\n  }\n\n  componentDidMount() {\n    const { addCurrenciesDispatch } = this.props;\n    addCurrenciesDispatch();\n    // fetch('https://economia.awesomeapi.com.br/json/all')\n    //   .then((response) => response.json())\n    //   .then((currencies) => {\n    //     console.log(currencies);\n    //     console.log(Object.keys(currencies));\n    //     console.log(Object.entries(currencies));\n    //     console.log(Object.values(currencies));\n    // dispatch(receiveCurrency(currencies));\n    // });\n  }\n\n  handleChange = (event) => {\n    const { target } = event;\n    this.setState({ [target.name]: target.value,\n    });\n  }\n\n  handleSubmit = async () => {\n    const { addExpenseDispatch } = this.props;\n    const {\n      valorDespesa, descrDespesa, currencyInput, metodoInput, categoriaInput, id,\n    } = this.state;\n    const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const data = await response.json();\n    const expenses = {\n      id: id + 1,\n      value: valorDespesa,\n      description: descrDespesa,\n      currency: currencyInput,\n      method: metodoInput,\n      tag: categoriaInput,\n      exchangeRates: data,\n    };\n    addExpenseDispatch(expenses);\n    this.setState({\n      id: id + 1,\n      valorDespesa: '',\n      descrDespesa: '',\n      currencyInput: 'USD',\n      metodoInput: 'Dinheiro',\n      categoriaInput: alimentacao,\n    });\n  }\n\n  handleEditSubmit = () => {\n    const { editExpenseDispatch, idToEdit, expenses } = this.props;\n    const {\n      valorDespesa, descrDespesa, currencyInput, metodoInput, categoriaInput, id,\n    } = this.state;\n    const editedExpense = {\n      id: Number(idToEdit),\n      value: valorDespesa,\n      description: descrDespesa,\n      currency: currencyInput,\n      method: metodoInput,\n      tag: categoriaInput,\n      exchangeRates: expenses[idToEdit].exchangeRates,\n    };\n    const otherExpenses = expenses.filter((exp) => exp.id !== Number(idToEdit));\n    const allExpenses = otherExpenses.concat(editedExpense);\n    // const allExpSorted = allExpenses.sort((a, b) => (a.id < b.id ? -1 : a.id > b.id ? 1 : 0));\n    const one = 1;\n    const allExpSorted = allExpenses.sort((a, b) => {\n      if (a.id < b.id) return -one;\n      if (a.id > b.id) return 1;\n      return 0;\n    });\n    editExpenseDispatch(allExpSorted);\n    this.setState({\n      id: id + 1,\n      valorDespesa: '',\n      descrDespesa: '',\n      currencyInput: 'USD',\n      metodoInput: 'Dinheiro',\n      categoriaInput: alimentacao,\n    });\n  }\n\n  render() {\n    const { currencies, editor } = this.props;\n    const {\n      valorDespesa,\n      descrDespesa, currencyInput, metodoInput, categoriaInput,\n    } = this.state;\n    return (\n      <div>\n        <label htmlFor=\"valorDespesa\">\n          Valor:\n          <input\n            type=\"text\"\n            data-testid=\"value-input\"\n            name=\"valorDespesa\"\n            id=\"valorDespesa\"\n            value={ valorDespesa }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"descrDespesa\">\n          Descrição:\n          <input\n            type=\"text\"\n            data-testid=\"description-input\"\n            name=\"descrDespesa\"\n            id=\"descrDespesa\"\n            value={ descrDespesa }\n            onChange={ this.handleChange }\n          />\n        </label>\n        <label htmlFor=\"currencyInput\">\n          Moeda:\n          <select\n            data-testid=\"currency-input\"\n            name=\"currencyInput\"\n            id=\"currencyInput\"\n            value={ currencyInput }\n            onChange={ this.handleChange }\n          >\n            { currencies.map((curr) => <option key={ curr }>{curr}</option>)}\n          </select>\n        </label>\n        <label htmlFor=\"metodoInput\">\n          Método de pagamento:\n          <select\n            data-testid=\"method-input\"\n            name=\"metodoInput\"\n            id=\"metodoInput\"\n            value={ metodoInput }\n            onChange={ this.handleChange }\n          >\n            <option>Dinheiro</option>\n            <option>Cartão de crédito</option>\n            <option>Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"categoriaInput\">\n          Categoria da despesa:\n          <select\n            data-testid=\"tag-input\"\n            name=\"categoriaInput\"\n            id=\"categoriaInput\"\n            value={ categoriaInput }\n            onChange={ this.handleChange }\n          >\n            <option>{alimentacao}</option>\n            <option>Lazer</option>\n            <option>Trabalho</option>\n            <option>Transporte</option>\n            <option>Saúde</option>\n          </select>\n        </label>\n        { editor\n          ? (\n            <button type=\"submit\" onClick={ this.handleEditSubmit }>\n              Editar despesa\n            </button>)\n          : (\n            <button type=\"submit\" onClick={ this.handleSubmit }>\n              Adicionar despesa\n            </button>)}\n        <Table />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  addCurrenciesDispatch: () => dispatch(fetchCurrencies()),\n  addExpenseDispatch: (value) => dispatch(addExpense(value)),\n  editExpenseDispatch: (value) => dispatch(editExpense(value)),\n});\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  editor: state.wallet.editor,\n  idToEdit: state.wallet.idToEdit,\n  expenses: state.wallet.expenses,\n});\n\nWalletForm.propTypes = {\n  addCurrenciesDispatch: PropTypes.func.isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  addExpenseDispatch: PropTypes.func.isRequired,\n  editor: PropTypes.bool.isRequired,\n  editExpenseDispatch: PropTypes.func.isRequired,\n  idToEdit: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletForm);\n","import React from 'react';\nimport Header from '../components/Header';\nimport WalletForm from '../components/WalletForm';\n// import '../css/carteira.css';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <div>\n        <div className=\"header\">\n          <Header />\n        </div>\n        <WalletForm />\n      </div>\n    );\n  }\n}\n\nexport default Wallet;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={ Login } />\n          <Route exact path=\"/carteira\" component={ Wallet } />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}